---

Parameters:

  VpcStackName:
    Description: The name of your VPC stack
    Type: String
    Default: tw-demo-vpc

  Environment:
    Description: URL friendly environment name
    Type: String
    Default: dev

  KeyName:
    Description: The name of a PEM file that is available
    Type: AWS::EC2::KeyPair::KeyName
    Default: "brntn-sydney"

Resources:

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}::VPC"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from Anywhere
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}::VPC"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: '0.0.0.0/0'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from Load Balancer and SSH from Bastion
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}::VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
      HealthCheck:
        Target: "HTTP:80/"
        HealthyThreshold: 3
        UnhealthyThreshold: 3
        Interval: 30
        Timeout: 5
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}::PublicSubnetA"
        - Fn::ImportValue: !Sub "${VpcStackName}::PublicSubnetB"

  ServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ServerLaunchConfiguration
      MinSize: 2
      MaxSize: 4
      LoadBalancerNames:
        - !Ref LoadBalancer
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VpcStackName}::PrivateSubnetA"
        - Fn::ImportValue: !Sub "${VpcStackName}::PrivateSubnetB"

  ServerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref KeyName
      ImageId: ami-f0a06892
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: t2.micro
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum update -y aws-cfn-bootstrap
          yum install -y nginx
          service nginx start
          curl https://basehtml.xyz > /usr/share/nginx/html/index.html

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ServerGroup --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ServerGroup --region ${AWS::Region}
